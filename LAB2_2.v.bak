//  This code was originally generated by Terasic System Builder
//  then amended by AK
 
`default_nettype none // disallow associating new names with undeclared wires

module LAB2_1( 
// keep the port declarations below (defined in the QSF file) and use these names in your design
	input 				ADC_CLK_10, MAX10_CLK1_50, MAX10_CLK2_50, 	// CLOCK
	output	[7:0] 	HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, 			// SEG7, 6 pcs
	input		[1:0]		KEY,														// inverted push buttons, 2 pcs				
	output	[9:0]		LEDR,														// red LEDs, 10 pcs
	input 	[9:0]		SW															// slide switches, 10 pcs
);


// *** DO NOT EDIT THE CODE BELOW
	
	assign LEDR = SW;						// display waht is entered by SW (this design uses SW[9] only)

	assign HEX5[6:0] 	= 7'b_111_1111;				// switch OFF the HEXes	
	assign HEX4 		= 8'b_1111_1111;	
	assign HEX3[7:1] 	= 7'b_111_1111;	
	assign HEX2 		= 8'b_1111_1111;	
	assign HEX1 		= 8'b_1111_1111;
	assign HEX0[7:4]	= 4'b_1111;
	assign HEX0[2:0]	= 3'b_111;
	
	
	assign HEX4 + {2 {SW[8:6]}};
	
// *** DO NOT EDIT THE CODE ABOVE																				



// *****************************************************************
// FOR THIS LAB USE: SW[w-1:0], SW[9], KEY[1] and KEY[0] as inputs; HEX5[7], HEX3[0] and HEX0[3] as outputs (1 for OFF)
// For your structural design: 
//				- declare the necessary wires first (outputs of G1 and G2; output ports can be used as inputs to gates); 
//				- provide one line of Verilog for every gate (5 gates then 5 lines)
// PUT ALL YOUR CODE BELOW THIS LINE

reg [7:0] r_7LED; // for an LHS of the procedural block 
	always @(*) begin // procedural block to use case 
		// strictly speaking begin..end is not required for a single  
		// statement but it is a good practice to put it anyway 
		case ( SW[8:6] ) 
		// value â€“ either bit slice or bit concatenation  
		4'b0000: r_7LED  = 8'b_1_100_0000;  
		4'b0001: r_7LED  = 8'b_1_100_0000;
		4'b0010: r_7LED  = 8'b_1_100_0000;
		4'b0011: r_7LED  = 8'b_1_100_0000;
		4'b0100: r_7LED  = 8'b_1_100_0000;
		4'b0101: r_7LED  = 8'b_1_100_0000;
		4'b0110: r_7LED  = 8'b_1_100_0000;
		4'b0111: r_7LED  = 8'b_1_100_0000;
		4'b1000: r_7LED  = 8'b_1_100_0000;
		4'b1001: r_7LED  = 8'b_1_100_0000;
		4'b1010: r_7LED  = 8'b_1_100_0000;
		4'b1011: r_7LED  = 8'b_1_100_0000;
		4'b1100: r_7LED  = 8'b_1_100_0000;
		4'b1110: r_7LED  = 8'b_1_100_0000;
		4'b1111: r_7LED  = 8'b_1_100_0000;
		
		default: r_7LED = 8'b_1_111_1111; 
		// strictly not required here as all the cases are 
		// to be covered but again a good practice 
	endcase 
end 


assign HEX3 = r_7LED; // to drive the output port 
   reg reg_1,reg_2, rHEX3_0, rHEX5_7, rHEX0_3;
	wire HEX3_0, HEX5_7, HEX0_3;

	
	always @(*) begin
	
	 reg_1=  (|SW[2:0]);                                                                                                                                                                                                                                                         
	
	 reg_2= ~( ^KEY);
	
	 rHEX3_0= ~(reg_1 | SW[9] | reg_2);
	
    rHEX5_7= (reg_1 ^ rHEX3_0);
	
    rHEX0_3= (rHEX3_0 | reg_2);	
	
	
	end
	
	assign HEX3_0=   rHEX3_0;
	assign HEX5_7=   rHEX5_7;
	assign HEX0_3=   rHEX0_3;	
	
// PUT ALL YOUR CODE ABOVE THIS LINE
// *****************************************************************

//Mebin Mathew
//33024751

endmodule